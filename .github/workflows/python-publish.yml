name: Build and Publish Python Wheel
on:
  push:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y g++-9 gcc-9 automake autoconf libtool pkg-config make
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 50
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 50
          
      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          brew install automake autoconf libtool pkg-config
          # Install specific version of Bison
          brew install bison
          echo 'export PATH="/usr/local/opt/bison/bin:$PATH"' >> ~/.bash_profile
          export PATH="/usr/local/opt/bison/bin:$PATH"
          # Show tool versions for debugging
          autoconf --version
          automake --version
          libtool --version
          make --version
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel pybind11 pytest
          
      - name: Download and prepare past-0.7.2
        run: |
          if [ ! -d "past-0.7.2" ]; then
              if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
                  wget https://master.dl.sourceforge.net/project/pocc/1.6/testing/modules/past-0.7.2.tar.gz
              else
                  curl -L -o past-0.7.2.tar.gz https://master.dl.sourceforge.net/project/pocc/1.6/testing/modules/past-0.7.2.tar.gz
              fi
              tar -xvf past-0.7.2.tar.gz
              cp setup.py ./past-0.7.2/
              cp bindings.cpp ./past-0.7.2/src/
              cp Makefile.am ./past-0.7.2/src/
              if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
                sed -i 's/\<restrict\>/__restrict__/g' ./past-0.7.2/past/include/past/abstract_interpretation_memory.h
              else
                sed -i '' 's/\<restrict\>/__restrict__/g' ./past-0.7.2/past/include/past/abstract_interpretation_memory.h
              fi
              chmod +x ./past-0.7.2/bootstrap.sh
          fi
          
      - name: Debug macOS environment
        if: matrix.os == 'macos-latest'
        run: |
          echo "SDKROOT: $SDKROOT"
          echo "MACOSX_DEPLOYMENT_TARGET: $MACOSX_DEPLOYMENT_TARGET"
          echo "Current directory:"
          pwd
          echo "Contents of directory:"
          ls -la
          echo "Past directory contents:"
          ls -la past-0.7.2
          
      - name: Configure and build on macOS
        if: matrix.os == 'macos-latest'
        run: |
          cd past-0.7.2
          export ARCHFLAGS="-arch x86_64"  # Build for Intel to avoid ARM issues
          export MACOSX_DEPLOYMENT_TARGET=11.0
          ./bootstrap.sh
          ./configure --disable-silent-rules V=1
          make V=1  # Verbose make to see what's failing
          cd ..
          
      - name: Build the wheel
        run: |
          cd past-0.7.2
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            export ARCHFLAGS="-arch x86_64"  # Match the architecture used in build
            export MACOSX_DEPLOYMENT_TARGET=11.0
          fi
          python setup.py bdist_wheel --verbose
          cp dist/* ../
          
      - name: Upload the wheel
        uses: actions/upload-artifact@v4
        with:
          name: past-wheel-${{ matrix.os }}
          path: "*.whl"
          retention-days: 7
          
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          
      - name: Get short commit SHA
        run: echo "COMMIT_HASH=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_ENV
        
      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          artifacts: 'dist/**/*'
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.COMMIT_HASH }}
          name: Release ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
