name: Build and Publish Python Wheel
on:
  push:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y g++-9 gcc-9 automake autoconf libtool pkg-config make
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 50
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 50
          
      - name: Install macOS dependencies and set environment
        if: matrix.os == 'macos-latest'
        run: |
          # Install required build tools with Homebrew
          brew install automake autoconf libtool pkg-config bison
          
          # Set up the correct PATH for Homebrew tools to be found first
          echo 'export PATH="/opt/homebrew/opt/bison/bin:$PATH"' >> ~/.bash_profile
          echo 'export PATH="/opt/homebrew/bin:$PATH"' >> ~/.bash_profile
          source ~/.bash_profile
          
          # Make environment variables available to subsequent steps
          echo "PATH=/opt/homebrew/bin:/opt/homebrew/opt/bison/bin:$PATH" >> $GITHUB_ENV
          echo "LDFLAGS=-L/opt/homebrew/opt/bison/lib" >> $GITHUB_ENV
          
          # Verify tools are using Homebrew versions
          which libtool
          which autoconf
          which automake
          which bison
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel pybind11
          
      - name: Download and prepare past-0.7.2
        run: |
          if [ ! -d "past-0.7.2" ]; then
              if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
                  wget https://master.dl.sourceforge.net/project/pocc/1.6/testing/modules/past-0.7.2.tar.gz
              else
                  curl -L -o past-0.7.2.tar.gz https://master.dl.sourceforge.net/project/pocc/1.6/testing/modules/past-0.7.2.tar.gz
              fi
              tar -xvf past-0.7.2.tar.gz
              cp setup.py ./past-0.7.2/
              cp bindings.cpp ./past-0.7.2/src/
              cp Makefile.am ./past-0.7.2/src/
              if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
                sed -i 's/\<restrict\>/__restrict__/g' ./past-0.7.2/past/include/past/abstract_interpretation_memory.h
              else
                sed -i '' 's/\<restrict\>/__restrict__/g' ./past-0.7.2/past/include/past/abstract_interpretation_memory.h
              fi
              chmod +x ./past-0.7.2/bootstrap.sh
          fi
          
      - name: Create simplified setup for macOS
        if: matrix.os == 'macos-latest'
        run: |
          # Create a simplified build script to avoid autotools complexity
          cd past-0.7.2
          cat > build_macos.sh << 'EOF'
          #!/bin/bash
          set -ex
          
          # Use Homebrew's GNU libtool explicitly
          export LIBTOOL="glibtool"
          export LIBTOOLIZE="glibtoolize"
          export ACLOCAL="aclocal"
          export AUTOCONF="autoconf"
          export AUTOMAKE="automake"
          
          # Run bootstrap with explicit tools
          $ACLOCAL
          $LIBTOOLIZE --force
          $AUTOCONF
          $AUTOMAKE --add-missing
          
          # Configure with minimal options
          ./configure --disable-dependency-tracking
          
          # Build with minimal targets
          make -j4
          EOF
          
          chmod +x build_macos.sh
          
      - name: Build on macOS
        if: matrix.os == 'macos-latest'
        run: |
          cd past-0.7.2
          export PATH="/opt/homebrew/bin:/opt/homebrew/opt/bison/bin:$PATH"
          export MACOSX_DEPLOYMENT_TARGET=11.0
          export ARCHFLAGS="-arch x86_64"
          
          # Try the simplified build script
          ./build_macos.sh || (echo "Simplified build failed, trying alternative approach" && ./bootstrap.sh && ./configure && make)
          
      - name: Build the wheel
        run: |
          cd past-0.7.2
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            export PATH="/opt/homebrew/bin:/opt/homebrew/opt/bison/bin:$PATH"
            export MACOSX_DEPLOYMENT_TARGET=11.0
            export ARCHFLAGS="-arch x86_64"
          fi
          
          # Try to build the wheel with better error output
          python setup.py bdist_wheel -v || python -c "import shutil; shutil.rmtree('build', ignore_errors=True)" && VERBOSE=1 python setup.py bdist_wheel -v
          
          # Move the wheel to the root directory if it exists
          if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
            cp dist/* ../
          fi
          
      - name: Upload the wheel or debug info
        uses: actions/upload-artifact@v4
        with:
          name: past-wheel-${{ matrix.os }}
          path: |
            *.whl
            past-0.7.2/config.log
          retention-days: 7
          
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          
      - name: List downloaded artifacts
        run: |
          find dist -type f -name "*.whl" | sort
          
      - name: Get short commit SHA
        run: echo "COMMIT_HASH=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_ENV
        
      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          artifacts: 'dist/**/*.whl'
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.COMMIT_HASH }}
          name: Release ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
