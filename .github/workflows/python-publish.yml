name: Build and Publish Python Wheels (Linux & macOS ARM)

# Trigger on every push to any branch
on:
  push:
    branches:
      - '**'  # Triggers on every branch push

jobs:
  build-linux:
    name: Build Linux Wheel (x86_64)
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout the code
        uses: actions/checkout@v4

      # Step 2: Set up Python 3.12
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Step 3: Install GCC 9 (if required by past-0.7.2)
      - name: Install GCC 9
        run: |
          sudo apt-get update
          sudo apt-get install -y g++-9 gcc-9
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 50
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 50
          gcc --version # Verify installation

      # Step 4: Install Autotools (Linux) - ADDED
      - name: Install Autotools (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y automake autoconf libtool pkg-config # Added pkg-config as it's often needed too

      # Step 5: Install pybind11 and Python build dependencies
      - name: Install Python build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel pybind11

      # Step 6: Build the Linux wheel
      - name: Build the Linux wheel
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          if [ ! -d "past-0.7.2" ]; then
            wget https://master.dl.sourceforge.net/project/pocc/1.6/testing/modules/past-0.7.2.tar.gz
            tar -xvf past-0.7.2.tar.gz
            cp setup.py ./past-0.7.2/
            cp bindings.cpp ./past-0.7.2/src/
            cp Makefile.am ./past-0.7.2/src/
            # Use __restrict__ which is understood by GCC and Clang
            sed -i 's/\<restrict\>/__restrict__/g' ./past-0.7.2/past/include/past/abstract_interpretation_memory.h
          fi
          cd past-0.7.2
          # The setup.py likely triggers ./bootstrap.sh or similar, which needs autotools
          python setup.py bdist_wheel
          mv dist ../dist_linux # Use a distinct name temporarily

      # Step 7: Upload the Linux wheel artifact
      - name: Upload the Linux wheel
        uses: actions/upload-artifact@v4
        with:
          name: dist-linux
          path: dist_linux/

  build-macos-arm:
    name: Build macOS Wheel (ARM64)
    runs-on: macos-14
    steps:
      # Step 1: Checkout the code
      - name: Checkout the code
        uses: actions/checkout@v4

      # Step 2: Set up Python 3.12
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Step 3: Install Autotools (macOS) - ADDED
      - name: Install Autotools (macOS)
        run: brew install automake autoconf libtool pkg-config # Added pkg-config

      # Step 4: Install Python build dependencies
      - name: Install Python build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel pybind11

     # Step 5: Prepare PAST Source (Download, Extract, Copy, Patch) - MODIFIED for automatic patch
      - name: Prepare PAST Source and Auto-Patch for ARM
        run: |
          set -e # Exit on first error
          set -x # Print commands being executed

          PAST_SRC_DIR="past-0.7.2"
          TIMER_C_FILE="$PAST_SRC_DIR/core/timer.c"
          INCLUDE_FILE="$PAST_SRC_DIR/past/include/past/abstract_interpretation_memory.h"

          echo "Downloading and extracting PAST..."
          if [ ! -d "$PAST_SRC_DIR" ]; then
            curl -L -o past-0.7.2.tar.gz https://master.dl.sourceforge.net/project/pocc/1.6/testing/modules/past-0.7.2.tar.gz
            tar -xvf past-0.7.2.tar.gz
          else
            echo "PAST directory already exists."
          fi

          echo "Copying custom files..."
          cp setup.py "$PAST_SRC_DIR/"
          cp bindings.cpp "$PAST_SRC_DIR/src/"
          cp Makefile.am "$PAST_SRC_DIR/src/"

          echo "Patching 'restrict' keyword..."
          # macOS sed requires an argument for -i (backup extension), use '' for no backup
          sed -i '' 's/\<restrict\>/__restrict__/g' "$INCLUDE_FILE"

          # ---- START AUTOMATIC PATCHING FOR timer.c ----
          echo "Auto-Patching $TIMER_C_FILE for macOS ARM..."

          # Define the replacement C code block using a HEREDOC
          # This block includes necessary headers and the cross-platform get_cycles function
          read -r -d '' REPLACEMENT_CODE <<'EOF' || true
          #include <stdint.h> /* For uint64_t */
          #if defined(__APPLE__) && defined(__aarch64__)
          #include <mach/mach_time.h> /* For mach_absolute_time */
          #endif
          #include <time.h> /* For clock() fallback */

          /* Patched version for cross-platform compatibility */
          static inline uint64_t get_cycles(void) {
          #if defined(__APPLE__) && defined(__aarch64__)
              /* Use macOS ARM high-resolution timer */
              return mach_absolute_time();
          #elif defined(__x86_64__) || defined(__i386__)
              /* Original x86 code */
              unsigned cycles_lo, cycles_hi;
              __asm__ volatile ("RDTSC" : "=a" (cycles_lo), "=d" (cycles_hi));
              return ((uint64_t)cycles_hi << 32) | cycles_lo;
          #else
              /* Fallback for other architectures (might need improvement) */
              #warning "get_cycles() not implemented for this architecture, using clock()"
              return (uint64_t)clock(); /* Low resolution fallback */
          #endif
          }
          EOF

          # Check if the target function exists before trying to replace it
          if grep -q "static inline uint64_t get_cycles(void)" "$TIMER_C_FILE"; then
            echo "Found original get_cycles function. Replacing..."
            # Create a temporary file excluding the old function definition
            # This deletes lines from the start pattern to the end pattern (inclusive)
            sed '/^static inline uint64_t get_cycles(void)/,/^}/d' "$TIMER_C_FILE" > "$TIMER_C_FILE.tmp"

            # Prepend the new function definition (which includes headers) to the temporary file
            echo "$REPLACEMENT_CODE" > "$TIMER_C_FILE.patched" # Start new file with replacement
            cat "$TIMER_C_FILE.tmp" >> "$TIMER_C_FILE.patched" # Append the rest of original file

            # Overwrite the original file
            mv "$TIMER_C_FILE.patched" "$TIMER_C_FILE"
            rm "$TIMER_C_FILE.tmp" # Clean up intermediate file
          else
            echo "WARNING: Could not find 'static inline uint64_t get_cycles(void)' in $TIMER_C_FILE. Skipping replacement."
            # Consider exiting with error if replacement is mandatory: exit 1
          fi

          echo "Fixing printf format specifiers '%Ld' -> '%lld' in $TIMER_C_FILE..."
          sed -i '' 's/%Ld/%lld/g' "$TIMER_C_FILE"

          echo "Contents of $TIMER_C_FILE after patching:"
          cat "$TIMER_C_FILE"
          # ---- END AUTOMATIC PATCHING FOR timer.c ----


      # Step 6: Upload the macOS wheel artifact
      - name: Upload the macOS ARM wheel
        uses: actions/upload-artifact@v4
        with:
          name: dist-macos-arm
          path: dist_macos/

  release:
    name: Create GitHub Release
    # if: github.ref_type == 'tag' # IMPORTANT: Uncomment this line if you only want releases on git tags
    needs: [build-linux, build-macos-arm]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Step 7a: Download Linux artifact
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-linux
          path: dist/

      # Step 7b: Download macOS artifact
      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-macos-arm
          path: dist/

      # List downloaded files for verification (optional)
      - name: List files in dist
        run: ls -l dist/

      # Step 8: Get short commit SHA
      - name: Get short commit SHA
        run: echo "COMMIT_HASH=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_ENV

      # Step 9: Publish release
      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          artifacts: 'dist/*'
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.COMMIT_HASH }}
          name: Release ${{ env.COMMIT_HASH }}
          body: "Automated release including Linux (x86_64) and macOS (ARM64) wheels. Built from commit ${{ github.sha }}."
          draft: false
          prerelease: true # Consider setting to true if these are dev builds
